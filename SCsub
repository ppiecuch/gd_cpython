#!/usr/bin/env python
import os
import platform

Import("env")
Import("env_modules")

search_paths = ["#modules/gdextensions", ".", "pylib", "pylib/config", "pylib/include", "CPython/Include", "CPython/Godot"]
defines = ["GD_PYTHON", "_CRT_SECURE_NO_WARNINGS"]
if env["platform"] == "windows":
	defines += ["MS_WINDOWS"]
	search_paths += ["CPython/PC"]

env_module = env.Clone()
env_module.Append(CPPPATH=search_paths)
env_module.Append(CPPDEFINES=defines)
if env["platform"] == "android" or env["platform"] == "iphone":
	env_module.Append(CPPFLAGS=["-frtti", "-fexceptions"])

env_glue_module = env.Clone()
env_glue_module.Append(CPPPATH=search_paths)
env_glue_module.Append(CPPDEFINES=defines)

sources = [
	"CPython/Python/_warnings.c",
	"CPython/Python/asdl.c",
	"CPython/Python/ast.c",
	"CPython/Python/atof.c",
	"CPython/Python/bltinmodule.c",
	"CPython/Python/ceval.c",
	"CPython/Python/codecs.c",
	"CPython/Python/compile.c",
	"CPython/Python/dynload_stub.c",
	"CPython/Python/dtoa.c",
#	"CPython/Python/dup2.c",
	"CPython/Python/errors.c",
	"CPython/Python/formatter_string.c",
	"CPython/Python/formatter_unicode.c",
	"CPython/Python/frozen.c",
	"CPython/Python/frozenmain.c",
	"CPython/Python/future.c",
	"CPython/Python/getargs.c",
	"CPython/Python/getcompiler.c",
	"CPython/Python/getcopyright.c",
#	"CPython/Python/getcwd.c",
	"CPython/Python/getopt.c",
	"CPython/Python/getplatform.c",
	"CPython/Python/getversion.c",
	"CPython/Python/graminit.c",
	"CPython/Python/import.c",
	"CPython/Python/importdl.c",
	"CPython/Python/marshal.c",
	"CPython/Python/modsupport.c",
	"CPython/Python/mysnprintf.c",
	"CPython/Python/mystrtoul.c",
	"CPython/Python/peephole.c",
	"CPython/Python/pyarena.c",
	"CPython/Python/pyctype.c",
	"CPython/Python/pyfpe.c",
	"CPython/Python/pymath.c",
	"CPython/Python/pystate.c",
	"CPython/Python/pystrcmp.c",
	"CPython/Python/pystrtod.c",
	"CPython/Python/Python-ast.c",
	"CPython/Python/pythonrun.c",
	"CPython/Python/random.c",
#   "CPython/Python/sigcheck.c",
#	"CPython/Python/strdup.c",
#	"CPython/Python/strtod.c",
	"CPython/Python/structmember.c",
	"CPython/Python/symtable.c",
	"CPython/Python/sysmodule.c",
	"CPython/Python/thread.c",
	"CPython/Python/traceback.c",
	"CPython/Parser/acceler.c",
	"CPython/Parser/bitset.c",
	"CPython/Parser/firstsets.c",
	"CPython/Parser/grammar.c",
	"CPython/Parser/grammar1.c",
#   "CPython/Parser/intrcheck.c",
	"CPython/Parser/listnode.c",
	"CPython/Parser/metagrammar.c",
	"CPython/Parser/myreadline.c",
	"CPython/Parser/node.c",
	"CPython/Parser/parser.c",
	"CPython/Parser/parsetok.c",
	"CPython/Parser/printgrammar.c",
	"CPython/Parser/tokenizer.c",
	"CPython/Parser/tokenizer_pgen.c",
	"CPython/Objects/abstract.c",
	"CPython/Objects/boolobject.c",
	"CPython/Objects/bufferobject.c",
	"CPython/Objects/bytearrayobject.c",
	"CPython/Objects/bytes_methods.c",
	"CPython/Objects/capsule.c",
	"CPython/Objects/cellobject.c",
	"CPython/Objects/classobject.c",
	"CPython/Objects/cobject.c",
	"CPython/Objects/codeobject.c",
	"CPython/Objects/complexobject.c",
	"CPython/Objects/descrobject.c",
	"CPython/Objects/dictobject.c",
	"CPython/Objects/enumobject.c",
	"CPython/Objects/exceptions.c",
	"CPython/Objects/fileobject.c",
	"CPython/Objects/floatobject.c",
	"CPython/Objects/frameobject.c",
	"CPython/Objects/funcobject.c",
	"CPython/Objects/genobject.c",
	"CPython/Objects/intobject.c",
	"CPython/Objects/iterobject.c",
	"CPython/Objects/listobject.c",
	"CPython/Objects/longobject.c",
	"CPython/Objects/memoryobject.c",
	"CPython/Objects/methodobject.c",
	"CPython/Objects/moduleobject.c",
	"CPython/Objects/object.c",
	"CPython/Objects/obmalloc.c",
	"CPython/Objects/rangeobject.c",
	"CPython/Objects/setobject.c",
	"CPython/Objects/sliceobject.c",
	"CPython/Objects/stringobject.c",
	"CPython/Objects/structseq.c",
	"CPython/Objects/tupleobject.c",
	"CPython/Objects/typeobject.c",
	"CPython/Objects/unicodectype.c",
	"CPython/Objects/unicodeobject.c",
	"CPython/Objects/weakrefobject.c",
	"CPython/Modules/_io/_iomodule.c",
	"CPython/Modules/_io/bufferedio.c",
	"CPython/Modules/_io/bytesio.c",
	"CPython/Modules/_io/fileio.c",
	"CPython/Modules/_io/iobase.c",
	"CPython/Modules/_io/stringio.c",
	"CPython/Modules/_io/textio.c",
	"CPython/Modules/cjkcodecs/multibytecodec.c",
#	"CPython/Modules/main.c",
	"CPython/Modules/getbuildinfo.c",
	"CPython/Modules/posixmodule.c",
	"CPython/Modules/arraymodule.c",
	"CPython/Modules/gcmodule.c",
	"CPython/Modules/_csv.c",
	"CPython/Modules/_collectionsmodule.c",
	"CPython/Modules/itertoolsmodule.c",
	"CPython/Modules/operator.c",
	"CPython/Modules/_math.c",
	"CPython/Modules/mathmodule.c",
	"CPython/Modules/cmathmodule.c",
	"CPython/Modules/errnomodule.c",
	"CPython/Modules/_weakref.c",
	"CPython/Modules/_sre.c",
	"CPython/Modules/_codecsmodule.c",
	"CPython/Modules/_localemodule.c",
	"CPython/Modules/cPickle.c",
	"CPython/Modules/cStringIO.c",
	"CPython/Modules/timemodule.c",
	"CPython/Modules/datetimemodule.c",
	"CPython/Modules/shamodule.c",
	"CPython/Modules/sha256module.c",
	"CPython/Modules/sha512module.c",
	"CPython/Modules/md5.c",
	"CPython/Modules/md5module.c",
	"CPython/Modules/_json.c",
	"CPython/Modules/_struct.c",
	"CPython/Modules/_functoolsmodule.c",
	"CPython/Modules/threadmodule.c",
	"CPython/Modules/binascii.c",
	"CPython/Modules/_randommodule.c",
	"CPython/Modules/socketmodule.c",
	"CPython/Modules/zlibmodule.c",
	"CPython/Modules/zipimport.c",
	"CPython/Modules/selectmodule.c",
	"CPython/Modules/signalmodule.c",
	"CPython/Modules/stropmodule.c",
	"CPython/Modules/fcntlmodule.c",
	"CPython/Modules/pydebug.c",
	"CPython/Config/pyimportconfig.c",
	"CPython/Config/pygetpath.c",
	"CPython/Godot/_py_file.cpp",
]

if env["platform"] == "osx":
	sources += ["CPython/Python/mactoolboxglue.c"]

sources += [
	"pylib/godot/py_godot.cpp"
]

if os.path.exists("pylib/modules"):
	for filename in os.listdir("pylib/modules"):
		if filename.endswith(".c") or filename.endswith(".cpp"):
			base=os.path.splitext(filename)[0]
			env_module.Append(CPPDEFINES=[base.upper()])
			print("(CPython) Enabling %s with macro %s" % (filename, base.upper()))
			sources += ["pylib/modules/%s" % filename]

# build compressed library
env_module.Zip("pylib.zip", "CPython/Lib", ZIPROOT="modules/gd_cpython/CPython/Lib")

glue_sources = [
	"register_types.cpp",
	"godot_cpython.cpp",
]

# Compile as a static library
lib = env_module.Library("gd_cpython", sources)
# Add the library as a dependency of the final executable
env.Prepend(LIBS=[lib])

lib_glue = env_glue_module.Library("gd_cpython_glue", glue_sources)
env.Prepend(LIBS=[lib_glue])
